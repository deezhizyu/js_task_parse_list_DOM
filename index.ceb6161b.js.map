{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,EAAmB,SAAS,gBAAgB,CAAC,MAC7C,EAAe,SAAS,aAAa,CAAC,MAE5C,SAAS,EAAY,CAAG,EACtB,OAAO,EAAI,OAAO,CAAC,IAAK,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,GAC9C,CAiCA,EAAa,SAAS,CAAG,KACzB,AAAA,EAAa,eAAe,CAA5B,KAAA,CAAA,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EA/BS,MAAM,IAAI,CA+BsB,GA/Bf,IAAI,CAAC,SAAC,CAAA,CAAG,CAAjC,EACE,IAAM,EAAkB,EAAY,EAAE,OAAO,CAAC,MAAM,EAGpD,OAAO,AAFiB,EAAY,EAAE,OAAO,CAAC,MAAM,EAE3B,CAC3B,K,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,KA4BF,AAzBA,SAAsB,CAAI,EACxB,IAAM,EAAqB,EAAE,CAExB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAkB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAlB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAwB,CAAxB,IAAM,EAAN,EAAA,KAAA,CACG,EAAU,EAAS,OAAO,CAE1B,EAAe,EAAS,SAAS,CAAC,IAAI,GACtC,EAAmB,EAAQ,QAAQ,CACnC,EAAiB,EAAY,EAAQ,MAAM,EAC3C,EAAc,SAAS,EAAQ,GAAG,EAExC,EAAmB,IAAI,CAAC,CACtB,aAAA,EACA,iBAAA,EACA,eAAA,EACA,YAAA,CACF,EACF,C,C,M,E,CAdK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAiBP,EAKa","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar _employeeList;\nvar employeeElements = document.querySelectorAll(\"li\");\nvar employeeList = document.querySelector(\"ul\");\nfunction parseSalary(str) {\n    return str.replace(\"$\", \"\").split(\",\").join(\"\");\n}\nfunction sortList(list) {\n    return Array.from(list).sort(function(a, b) {\n        var employeeASalary = parseSalary(a.dataset.salary);\n        var employeeBSalary = parseSalary(b.dataset.salary);\n        return employeeBSalary - employeeASalary;\n    });\n}\nfunction getEmployees(list) {\n    var parsedEmployeeList = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var employee = _step.value;\n            var dataset = employee.dataset;\n            var employeeName = employee.innerHTML.trim();\n            var employeePosition = dataset.position;\n            var employeeSalary = parseSalary(dataset.salary);\n            var employeeAge = parseInt(dataset.age);\n            parsedEmployeeList.push({\n                employeeName: employeeName,\n                employeePosition: employeePosition,\n                employeeSalary: employeeSalary,\n                employeeAge: employeeAge\n            });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return parsedEmployeeList;\n}\nemployeeList.innerHTML = null;\n(_employeeList = employeeList).replaceChildren.apply(_employeeList, _to_consumable_array(sortList(employeeElements)));\ngetEmployees(employeeElements);\n\n//# sourceMappingURL=index.ceb6161b.js.map\n","'use strict';\n\nconst employeeElements = document.querySelectorAll('li');\nconst employeeList = document.querySelector('ul');\n\nfunction parseSalary(str) {\n  return str.replace('$', '').split(',').join('');\n}\n\nfunction sortList(list) {\n  return Array.from(list).sort((a, b) => {\n    const employeeASalary = parseSalary(a.dataset.salary);\n    const employeeBSalary = parseSalary(b.dataset.salary);\n\n    return employeeBSalary - employeeASalary;\n  });\n}\n\nfunction getEmployees(list) {\n  const parsedEmployeeList = [];\n\n  for (const employee of list) {\n    const dataset = employee.dataset;\n\n    const employeeName = employee.innerHTML.trim();\n    const employeePosition = dataset.position;\n    const employeeSalary = parseSalary(dataset.salary);\n    const employeeAge = parseInt(dataset.age);\n\n    parsedEmployeeList.push({\n      employeeName,\n      employeePosition,\n      employeeSalary,\n      employeeAge,\n    });\n  }\n\n  return parsedEmployeeList;\n}\n\nemployeeList.innerHTML = null;\nemployeeList.replaceChildren(...sortList(employeeElements));\n\ngetEmployees(employeeElements);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","employeeElements","document","querySelectorAll","employeeList","querySelector","parseSalary","str","replace","split","join","innerHTML","replaceChildren","apply","_array_without_holes","isArray","from","sort","a","b","employeeASalary","dataset","salary","employeeBSalary","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","getEmployees","list","parsedEmployeeList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","employee","value","employeeName","trim","employeePosition","position","employeeSalary","employeeAge","parseInt","age","push","err","return"],"version":3,"file":"index.ceb6161b.js.map"}